<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting up player bound variables.

hub_selected = 0;

red = 0;
blue = 0;
green = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting up variables for view.

margin_x = 40;
margin_y = 40;
cview = 0; // Current view.
speed_view_movement = 1;

// Intial view location.
view_xport[cview] = 0;
view_yport[cview] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make view follow mouse.

// Move screen to the left.
if ((mouse_x - view_xview[cview] &lt; margin_x) and (view_xview[cview] != 0)) {
    view_xview[cview] -= speed_view_movement;
    obj_stats_box.x -= speed_view_movement;
}
// Move screen to the right.
if ((mouse_x - view_xview[cview] &gt; (view_wview[0] - margin_x)) and !(view_xview[cview] + view_wview[0] &gt;= room_width)) {
    view_xview[cview] += speed_view_movement;
    obj_stats_box.x += speed_view_movement;
}

// Move screen up.
if ((mouse_y - view_yview[cview] &lt; margin_y) and (view_yview[cview] != 0)) {
    view_yview[cview] -= speed_view_movement;
    obj_stats_box.y -= speed_view_movement;
}

// Move screen down.
if ((mouse_y - view_yview[0] &gt; (view_hview[cview] -  margin_y)) and !(view_yview[cview] + view_hview[cview] &gt;= room_height)) {
    view_yview[cview] += speed_view_movement;
    obj_stats_box.y += speed_view_movement;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create hub.

// Check if no hub is near.
nearest_hub = instance_nearest(mouse_x, mouse_y, obj_hub);

if (point_distance(mouse_x, mouse_y, nearest_hub.x, nearest_hub.y) &gt; 40) {
    // Send info about hub to server.
    buffer_seek( obj_client.Buffer , buffer_seek_start , 0 );
    buffer_write( obj_client.Buffer , buffer_u8 , 2 ); // Id of action.
    buffer_write( obj_client.Buffer , buffer_u32 , mouse_x ); // X of new hub.
    buffer_write( obj_client.Buffer , buffer_u32 , mouse_y ); // Y of new hub.
    network_send_packet( obj_client.Socket , obj_client.Buffer , buffer_tell( obj_client.Buffer ) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
